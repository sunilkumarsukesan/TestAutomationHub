name: 'TestRun_2025.07.$(Build.BuildId)'
trigger: none

resources:
  pipelines:
    - pipeline: deployPipeline  # alias
      source: TestAutomationHub
      trigger:
        branches:
          include:
            - main

variables:
  SCREENSHOT_STRATEGY: 'always'

stages:
  - stage: SonarQube
    displayName: 'SonarQube Analysis'
    jobs:
      - job: RunSonar
        displayName: 'Run SonarQube and Validate Gate'
        pool:
          name: Default
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'

          - task: Npm@1
            displayName: 'Install Dependencies'
            inputs:
              command: 'install'

          - script: |
              echo "Running SonarQube Analysis...

              npx sonar-scanner \
                -Dsonar.projectKey=TestingFramework \
                -Dsonar.sources=. \
                -Dsonar.host.url=http://20.17.97.4:9000 \
                -Dsonar.token=$(SonarToken) \
                | tee scanner-output.txt

              CE_TASK_URL=$(grep -oP 'ceTaskUrl: \K.*' scanner-output.txt)
              echo "üîÅ Polling Quality Gate from: $CE_TASK_URL"

              for i in {1..10}; do
                STATUS=$(curl -s -u $SONAR_TOKEN: $CE_TASK_URL | jq -r '.task.status')
                if [ "$STATUS" == "SUCCESS" ]; then
                  ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: $CE_TASK_URL | jq -r '.task.analysisId')
                  break
                fi
                echo "Waiting for quality gate result... ($i/10)"
                sleep 5
              done

              QG_STATUS=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST/api/qualitygates/project_status?analysisId=$ANALYSIS_ID" | jq -r '.projectStatus.status')
              echo "üìä Quality Gate status: $QG_STATUS"

              if [ "$QG_STATUS" != "OK" ]; then
                echo "‚ùå SonarQube Quality Gate failed!"
                exit 1
              else
                echo "‚úÖ Quality Gate passed!"
              fi
            displayName: 'Run SonarQube and Validate Quality Gate'

  - stage: Test
    displayName: 'Run Tests'
    dependsOn: SonarQube
    condition: succeeded()
    jobs:
      - job: RunTests
        pool:
          name: Default
        steps:
          - script: |
              echo "üß™ Running tests..."
              npm run test
            displayName: 'Run Tests'

  - stage: Report
    displayName: 'üìÑ Publish Test Report'
    dependsOn: Test
    condition: succeededOrFailed()
    jobs:
      - job: PublishReport
        pool:
          name: Default
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'üìÑ Publish Test Report'
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/reports'
              artifact: 'TestExecution_Report'
